        -:    0:Source:../src/Function.hpp
        -:    0:Graph:tc.gcno
        -:    0:Data:tc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Introduction to the header template.
        -:    3: * For each function FUNC, the file name shall be FUNC.hpp in src/DeemaAlomair folder.
        -:    4: * Every FUNC shall be replaced with implemented function name.
        -:    5: * The type of a CFS with FLOAT is CFST<FLOAT>
        -:    6: * The code shall follow c++17 standard.
        -:    7: * Only the c++ standard libraries are allowed.
        -:    8: * C-style code is highly not recommended.
        -:    9: */
        -:   10:
        -:   11:#ifndef FSL_FUNC_HPP
        -:   12:#define FSL_FUNC_HPP
        -:   13:
        -:   14:#include "CFSData.hpp"
        -:   15:#include <functional>
        -:   16:
        -:   17:/*Other library inclusion is here*/
        -:   18:namespace FSL{
        -:   19:template<class FLOAT, class FUNC>
        1:   20:CFST<FLOAT> Function(const CFST<FLOAT>& f, const FUNC& Deriv)
        -:   21:{
        -:   22:    /*
        -:   23:	 * In the i-th loop:
        -:   24:	 * 	pf is f^i/(i!);
        -:   25:	 *	res is the result until now.
        -:   26:	 *	dd is DD(i);
        -:   27:	 * 	mul is 1/i	
        -:   28:     */
        2:   29:    CFST<FLOAT> pf(f.getn(), f.getomega()); 
        1:   30:    CFST<FLOAT> res(f.getn(), f.getomega());
        2:   31:    CFST<FLOAT> mul(f.getn(), f.getomega());
        2:   32:    CFST<FLOAT> dd(f.getn(), f.getomega());
        1:   33:    pf.setAi(0, 1);
        1:   34:    size_t n = f.getn();
        4:   35:    for (size_t i = 0; i <= n; ++i)
        -:   36:    {
        3:   37:    	dd.setAi(0, Deriv(i));
        3:   38:    	res = Addition(res, Multiplication(pf, dd));
        3:   39:    	pf = Multiplication(pf, f);
        3:   40:    	mul.setAi(0, 1/FLOAT(i+1));
        3:   41:    	pf = Multiplication(pf, mul);
        -:   42:    }
        2:   43:    return res;
        -:   44:}
        -:   45:
        -:   46:template <class FLOAT>
        -:   47:FLOAT sinDeriv(size_t i)
        -:   48:{
        -:   49:	switch (i%4)
        -:   50:	{
        -:   51:		case 0: return 0.0;
        -:   52:		case 1: return 1.0;
        -:   53:		case 2: return 0.0;
        -:   54:		case 3: return -1.0;
        -:   55:	}
        -:   56:}
        -:   57:
        -:   58:template <class FLOAT>
        -:   59:FLOAT cosDeriv(size_t i)
        -:   60:{
        -:   61:	switch (i%4)
        -:   62:	{
        -:   63:		case 0: return 1.0;
        -:   64:		case 1: return 0.0;
        -:   65:		case 2: return -1.0;
        -:   66:		case 3: return 0.0;
        -:   67:	}
        -:   68:}
        -:   69:
        -:   70:template <class FLOAT>
        3:   71:FLOAT expDeriv(size_t i)
        -:   72:{
        3:   73:	return 1.0;
        -:   74:}
        -:   75:
        -:   76:template <class FLOAT>
        -:   77:FLOAT lnDeriv(size_t i)
        -:   78:{
        -:   79:	if (i==0)
        -:   80:	{
        -:   81:		return 0;
        -:   82:	}
        -:   83:	FLOAT res = 1;
        -:   84:	for (int j = 1; j <= i; ++j)
        -:   85:	{
        -:   86:		res *= FLOAT(-j);
        -:   87:	}
        -:   88:	return res; 
        -:   89:}
        -:   90:
        -:   91:}
        -:   92:#endif
        -:   93:
        -:   94:/*
        -:   95: * Type N in MIS shall be translated to size_t in C++. 
        -:   96: * This type is already introduced in CFSData.h
        -:   97: */
